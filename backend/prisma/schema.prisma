// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ENUMS
enum UserRole {
  APPLICANT
  HR
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum ApplicationResult {
  PASS
  FAIL
}

// AUTHENTICATION & USER MANAGEMENT
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  phone     String?
  role      UserRole @default(APPLICANT)

  // Applicant relations
  applications Application[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// TEACHER APPLICATION SYSTEM
model Application {
  id             Int               @id @default(autoincrement())
  attemptNumber  Int               @default(1)
  status         ApplicationStatus @default(PENDING)
  program        String            // Teaching program/subject
  documents      String?           @db.Text // JSON string of uploaded file paths
  demoSchedule   DateTime?         // Teaching demo date/time
  totalScore     Float?            // Calculated from rubric scores
  result         ApplicationResult?
  hrNotes        String?           @db.Text // HR comments during review

  applicant   User @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId Int

  scores Score[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([applicantId, attemptNumber])
}

// RUBRIC SCORING SYSTEM
model Rubric {
  id          Int     @id @default(autoincrement())
  criteria    String  // e.g., "Communication", "Knowledge", "Teaching Skills"
  description String? @db.Text
  maxScore    Int     @default(10)
  weight      Float   @default(1.0) // Scoring weight/multiplier
  isActive    Boolean @default(true)

  scores Score[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Score {
  id          Int   @id @default(autoincrement())
  scoreValue  Float // Actual score given by HR
  comments    String? @db.Text

  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId Int

  rubric   Rubric @relation(fields: [rubricId], references: [id])
  rubricId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([applicationId, rubricId])
}

// EMAIL NOTIFICATIONS LOG
model Notification {
  id          Int      @id @default(autoincrement())
  email       String
  subject     String
  message     String   @db.Text
  type        String   // "submission", "approval", "rejection", "schedule", "result"
  sentAt      DateTime @default(now())
  
  applicationId Int?
  
  createdAt DateTime @default(now())
  
  @@index([email])
}

// OTP
model Otp {
  id        Int      @id @default(autoincrement())
  email     String
  otp       String
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
}
